AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to deploy a Streamlit weather app on ECS in a VPC with an ALB and auto-scaling.

Parameters:
  OpenWeatherAppApiKey:
    Description: OpenWeather.org API Key
    Type: String
    Default: 'N/A'
  ContainerImage:
    Description: The conatiner image on Docker Hub
    Type: String
    Default: 'thomasliddledba/weather-app:latest'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: App
          Value: WeatherApp
        - Key: Name
          Value: WeatherAppVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: App
          Value: WeatherApp
        - Key: Name
          Value: WeatherAppInternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: App
          Value: WeatherApp
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: App
          Value: WeatherApp
        - Key: Name
          Value: PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: App
          Value: WeatherApp
        - Key: Name
          Value: PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone:
        Fn::Select:
          - 3
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: App
          Value: WeatherApp
        - Key: Name
          Value: PrivateSubnet2

  NatPublicIP1:
    Type: AWS::EC2::EIP
    DependsOn: VPC
    Properties:
      Domain: vpc
      Tags:
        - Key: App
          Value: WeatherApp

  NatPublicIP2:
    Type: AWS::EC2::EIP
    DependsOn: VPC
    Properties:
      Domain: vpc
      Tags:
        - Key: App
          Value: WeatherApp

  NatGateway1:
    Type: AWS::EC2::NatGateway
    DependsOn: NatPublicIP1
    Properties: 
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt NatPublicIP1.AllocationId
      Tags:
        - Key: App
          Value: WeatherApp

  NatGateway2:
    Type: AWS::EC2::NatGateway
    DependsOn: NatPublicIP2
    Properties: 
      SubnetId: !Ref PublicSubnet2
      AllocationId: !GetAtt NatPublicIP2.AllocationId
      Tags:
        - Key: App
          Value: WeatherApp

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: App
          Value: WeatherApp
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: App
          Value: WeatherApp
        - Key: Name
          Value: PrivateRouteTable1

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      NatGatewayId: !Ref NatGateway1
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0

  SubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: App
          Value: WeatherApp
        - Key: Name
          Value: PrivateRouteTable2

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      NatGatewayId: !Ref NatGateway2
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0

  SubnetRouteTableAssociation4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: WeatherAppCluster
      Tags:
        - Key: App
          Value: WeatherApp

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      RoleName: WeatherAppECSTaskExecutionRole
      Tags:
        - Key: App
          Value: WeatherApp

  SSMParameterStorePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: WeatherAppApiKeyPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: ["ssm:GetParameter", "ssm:DescribeParameter"]
            Resource: 
              !Join
                - ''
                - - 'arn:'
                  - 'aws:'
                  - 'ssm'
                  - !Join ['', [':', !Ref AWS::Region]]
                  - !Join ['', [':', !Ref AWS::AccountId]]
                  - ':parameter/'
                  - !Ref SSMParameterApiKey
      Roles: [!Ref ECSTaskExecutionRole]


  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      RoleName: WeatherAppECSServiceRole
      Tags:
        - Key: App
          Value: WeatherApp

  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/weather-app
      RetentionInDays: 7
      Tags:
        - Key: App
          Value: WeatherApp

  ECSLogGroupXRay:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/weather-app/xray
      RetentionInDays: 7
      Tags:
        - Key: App
          Value: WeatherApp

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: weather-app
      RequiresCompatibilities: 
        - FARGATE
      Memory: 512
      Cpu : 256
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: weather-app-container
          Image: !Ref ContainerImage
          PortMappings:
            - ContainerPort: 8501
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: ecs
        - Name: xray_daemon
          Image: public.ecr.aws/xray/aws-xray-daemon
          Essential: True
          Cpu: 32
          MemoryReservation: 256
          PortMappings:
            - ContainerPort: 2000
              Protocol: udp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: True
              awslogs-group: !Ref ECSLogGroupXRay
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
      Tags:
        - Key: App
          Value: WeatherApp

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: WeatherAppALB
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Tags:
        - Key: App
          Value: WeatherApp

  XRayEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: 'Interface'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.xray'
      VpcId: !Ref VPC
      PrivateDnsEnabled: true
      SubnetIds: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref ALBSecurityGroup

  SSMEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: 'Interface'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssm'
      VpcId: !Ref VPC
      PrivateDnsEnabled: true
      SubnetIds: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref ALBSecurityGroup

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8501
          ToPort: 8501
          CidrIp: !GetAtt VPC.CidrBlock
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: App
          Value: WeatherApp

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: App
          Value: WeatherApp

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: WeatherAppTargetGroup
      Port: 8501
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckPort: 8501
      Matcher:
        HttpCode: 200-399
      Tags:
        - Key: App
          Value: WeatherApp

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 2
      TaskDefinition: !Ref ECSTaskDefinition
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref ALBSecurityGroup
      LoadBalancers:
        - ContainerName: weather-app-container
          ContainerPort: 8501
          TargetGroupArn: !Ref ALBTargetGroup
      Tags:
        - Key: App
          Value: WeatherApp

  ECSAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 4
      MinCapacity: 2
      ResourceId: 
        !Join
          - '/'
          - - 'service'
            - !Ref ECSCluster
            - Fn::GetAtt:
                - ECSService
                - Name
      RoleARN: !GetAtt ECSServiceRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ECSAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ECSAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 50.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60

  SSMParameterApiKey:
    Type: AWS::SSM::Parameter
    Properties:
      Name: OpenWeatherAppApiKey
      Type: String
      Value: !Ref OpenWeatherAppApiKey
      Description: The OpenWeather.org API Key
      Tags:
        App: WeatherApp

Outputs:
  ECSClusterName:
    Description: Name of the ECS Cluster
    Value: !Ref ECSCluster

  ECSServiceName:
    Description: Name of the ECS Service
    Value: !Ref ECSService

  ALBDNSName:
    Description: Website URL for Application
    Value: !Join
            - ''
            - - 'http://'
              - !GetAtt ALB.DNSName
